
scalar Date

type User {
  _id: ID
  username: String!
  name: String!
  email: String!
  password: String!
  avatar: String
  banner: String
  joinDate: Date
  favorites: [Post]
}

type Post {
  _id: ID
  title: String!
  imageUrl: String!
  categories: [String]!
  description: String!
  createdDate: Date
  likes: Int
  createdBy: User!
  messages: [Message]
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: Date
  messageUser: User!
}

type PostsPage {
  posts: [Post]
  hasMore: Boolean
}

enum PostsOrderByInput {
  createdDate_asc
  createdDate_desc
  title_asc
  title_desc
  likes_asc
  likes_desc
}

# likes for posts / favorites for user
type likesFaves {
  likes: Int
  favorites: [Post]
}

type Query {
  getCurrentUser: User
  getUser(userId: ID!): User!
  getPosts: [Post]
  getUserPosts(userId: ID!): [Post]
  getPost(postId: ID!): Post!
  getPostsByTag(tag: String!, orderBy: PostsOrderByInput): [Post]
  searchPosts(searchTerm: String): [Post]
  infiniteScrollPosts(
    pageNum: Int!, 
    pageSize: Int!, 
    orderBy: PostsOrderByInput
  ): PostsPage
}

type Token {
  token: String!
}

type Mutation {
  addPost(
    title: String!,
    imageUrl: String!,
    categories: [String]!,
    description: String!,
    creatorId: ID!
  ): Post!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
  deleteUserMessage(postId: ID!, messageId: ID!): Message!
  updateUserPost(
    postId: ID!,
    userId: ID!,
    title: String!,
    imageUrl: String!,
    categories: [String]!,
    description: String!
  ): Post!
  updateUserBanner(userId: ID!, banner: String!): User!
  deleteUserPost(postId: ID!): Post!
  likePost(postId: ID!, username: String!): likesFaves!
  unlikePost(postId: ID!, username: String!): likesFaves!
  signinUser(username: String!, password: String!): Token
  signupUser(
    username: String!, 
    name: String!, 
    email: String!, 
    password: String!
  ): Token
}